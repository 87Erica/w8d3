Base Class (Shape):

Shape is an abstract base class with an initializer to set the color and methods to get and set the color.
It has abstract methods (calculate_area and calculate_perimeter) that must be implemented by derived classes.

Derived Classes:

Circle: Inherits from Shape and implements the area and perimeter calculations.
Rectangle: Inherits from Shape and implements the area (length * width) and perimeter (2 * (length + width)) calculations.
Triangle: Inherits from Shape and implements the area using Heron's formula and perimeter as the sum of its sides.

Main Program:
This program creates instances of Circle, Rectangle, and Triangle with specific colors and dimensions.
Stores these instances in a list.
Iterates over the list, using polymorphism to call calculate_area and calculate_perimeter for each shape, and prints the results.

Overview
This documentation provides details about the Shape class hierarchy.

Class Design
Shape (Base Class)
An abstract base class, defining common attributes and methods for all shapes.

Attributes:
color (string): The color of the shape.

Methods:
__init__(self, color): Constructor to initialize the shape with the given color.
calculate_area(self): Abstract method to calculate the area of the shape (raises NotImplementedError).
calculate_perimeter(self): Abstract method to calculate the perimeter of the shape (raises NotImplementedError).
get_color(self): Method to retrieve the color of the shape.
set_color(self, color): Method to set the color of the shape.

Circle (Derived Class)
The Circle class inherits from the Shape class and represents a circle.

Attributes:
radius (float): The radius of the circle.

Methods:
__init__(self, color, radius): Constructor to initialize the circle: provided color and radius.
calculate_area(self): Calculates the area of the circle using the formula πr².
calculate_perimeter(self): Calculates the perimeter: formula 2πr.

Rectangle (Derived Class)
The Rectangle class inherits from the Shape class and represents a rectangle.

Attributes:
length (float): The length of the rectangle.
width (float): The width of the rectangle.

Methods:
__init__(self, color, length, width): Constructor to initialize the rectangle with the given color, length, and width.
calculate_area(self): Calculates the area of the rectangle using the formula length * width.
calculate_perimeter(self): Calculates the perimeter of the rectangle using the formula 2 * (length + width).

Triangle (Derived Class)
The Triangle class inherits from the Shape class and represents a triangle.

Attributes:
side1 (float): The length of the first side of the triangle.
side2 (float): The length of the second side of the triangle.
side3 (float): The length of the third side of the triangle.

Methods:
__init__(self, color, side1, side2, side3): Constructor to initialize the triangle with the given color and side lengths.
calculate_area(self): Calculates the area of the triangle using Heron's formula.
calculate_perimeter(self): Calculates the perimeter of the triangle as the sum of its sides (side1 + side2 + side3).

Usage
Creating Shape Instances
To create instances of different shapes, you need to instantiate the derived classes (Circle, Rectangle, Triangle) with the appropriate parameters.

Calculating Area and Perimeter
To calculate the area and perimeter of the shapes, you can call the calculate_area and calculate_perimeter methods on the shape instances.

Polymorphism
You can store different shape instances in a list and iterate over them to calculate and display their area, perimeter, and color using polymorphism.
The output will display the area, perimeter, and color of each shape.

This following code demonstrates the usage of the shape class hierarchy, showing how polymorphism allows different shapes to be processed uniformly.

**Retrieved math formulas from Chat GPT
